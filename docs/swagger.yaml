basePath: /api/v1
definitions:
  models.Category:
    properties:
      created_at:
        type: string
      id:
        type: integer
      name:
        type: string
      questions:
        items:
          $ref: '#/definitions/models.Question'
        type: array
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: invalid email or password
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        example: user@gmail.com
        type: string
      password:
        example: secret123
        type: string
    type: object
  models.LoginResponse:
    properties:
      token:
        example: jwt.token.here
        type: string
    type: object
  models.Option:
    properties:
      id:
        type: integer
      option_text:
        type: string
      question_id:
        type: integer
    type: object
  models.Question:
    properties:
      category_id:
        type: integer
      correct_answer:
        type: string
      created_at:
        type: string
      id:
        type: integer
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      question_text:
        type: string
    type: object
  models.QuizResult:
    properties:
      createdAt:
        type: string
      id:
        type: integer
      score:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      userID:
        type: integer
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A REST API for managing users, quizzes, and results.
  termsOfService: http://swagger.io/terms/
  title: Quiz API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return JWT token
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: User login
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account with email, username, and password
      parameters:
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - auth
  /categories:
    get:
      description: Fetch all categories with related questions and options
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: Get all categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Add a new category
      parameters:
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create new category
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Delete category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: Category Data
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a category
      tags:
      - categories
  /profile:
    get:
      description: Retrieve the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
  /questions:
    get:
      description: Fetch all questions with their options
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
      summary: Get all questions
      tags:
      - questions
    post:
      consumes:
      - application/json
      description: Add a new question with options
      parameters:
      - description: Question Data
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.Question'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Question'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a question
      tags:
      - questions
  /questions/{id}:
    delete:
      description: Delete question by ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete a question
      tags:
      - questions
    get:
      description: Fetch a question by ID with options
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Question'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get question by ID
      tags:
      - questions
    put:
      consumes:
      - application/json
      description: Update question by ID
      parameters:
      - description: Question ID
        in: path
        name: id
        required: true
        type: integer
      - description: Question Data
        in: body
        name: question
        required: true
        schema:
          $ref: '#/definitions/models.Question'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Question'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update a question
      tags:
      - questions
  /quiz/results:
    get:
      description: Get all past quiz results for logged-in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.QuizResult'
            type: array
      summary: Get user quiz results
      tags:
      - quiz
  /quiz/start:
    get:
      description: Get randomized questions by category
      parameters:
      - description: Category ID
        in: query
        name: category
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Question'
            type: array
      summary: Start a quiz
      tags:
      - quiz
  /quiz/submit:
    post:
      consumes:
      - application/json
      description: Submit answers and calculate score
      parameters:
      - description: 'Answers in {question_id: answer} format'
        in: body
        name: answers
        required: true
        schema:
          additionalProperties:
            type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Submit quiz answers
      tags:
      - quiz
  /reports/users:
    get:
      description: Retrieve all users with their quiz results.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Users Report
      tags:
      - Reports
  /results/top:
    get:
      description: Retrieve the top 10 quiz results ordered by score.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.QuizResult'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get Top 10 Scores
      tags:
      - Results
swagger: "2.0"
